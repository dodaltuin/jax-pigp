"""
File: test_kl_divergence.py
Description: Tests gaussian_kl() function
"""

# ensure that we can access jax_pigp
import sys
sys.path.append('../../')

from jax import config, random, scipy
import jax.numpy as jnp
config.update("jax_enable_x64", True)

import jax_pigp
from jax_pigp.kl_divergence import gaussian_kl
from jax_pigp.utility_fns import softplus
from jax_pigp.interdomain_moments.utils_vmap import vmap_kernel_fn


NUGGET = 1e-6

def gen_params(D: int = 1) -> dict:
    """
    Generate dummy kernel parameter values
    """
    params = {}
    params['amp']   = softplus(2., inv=True)
    params['ls']    = softplus(jnp.array([1.]*D), inv=True)
    params['alpha'] = 4.

    return params

def gram_test_fn(kernel, rng_val: int, N: int, D: int) -> None:

    params = gen_params(D)
    locs = random.normal(random.PRNGKey(rng_val), shape=(N,D))

    gram = vmap_kernel_fn(kernel)(params, locs, locs)

    gram_list_comp = jnp.hstack([jnp.vstack([kernel(params, locs[i], locs[j]).reshape(-1,1) for i in range(N)]) for j in range(N)])

    assert jnp.allclose(gram, gram_list_comp)

    assert not jnp.any(jnp.isnan(scipy.linalg.cholesky(gram + jnp.eye(N)*NUGGET)))

def test_squared_exponential() -> None:
    """
    Tests on gram matrix generated by squared exponential kernel
    """
    se_kernel = jax_pigp.kernels.squared_exponential

    # 1D test
    gram_test_fn(se_kernel, 101, 50, 1)

    # 5D test
    gram_test_fn(se_kernel, 1101, 250, 5)


def test_rational_quadratic() -> None:
    """
    Tests on gram matrix generated by rational quadratic kernel
    """
    se_kernel = jax_pigp.kernels.squared_exponential

    # 1D test
    gram_test_fn(se_kernel, 12, 100, 1)

    # 4D test
    gram_test_fn(se_kernel, 99, 350, 4)

